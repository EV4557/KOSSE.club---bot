import sys
sys.path.insert(0, "/home/ispasatel/www/kosse_bot/site-packages")  # –ø—É—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –Ω–∞ Railway)
import os
from telegram import (
    Update, ReplyKeyboardMarkup,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler
)

print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –∫–æ–¥ Kosse Bot!")

CHOOSE_ACTION, ASK_QUESTION, BUY_TICKET, CHOOSE_EVENT_FOR_QUESTION = range(4)

organizer_contact = "@kosse_club"

ABOUT_TEXT = (
    "Kosse.club ‚Äî —ç—Ç–æ —Ç—É—Ä–±–∞–∑–∞ ¬´–ö–µ–º–ø–∏–Ω–≥ –∑–æ–Ω–∞¬ª, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å–µ–º–µ–π–Ω–æ–≥–æ –∏ –±–∏–∑–Ω–µ—Å-—Ñ–æ—Ä–º–∞—Ç–∞.\n\n"
    "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n"
    "‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ ‚Äî —Å–≤–∞–¥—å–±—ã, –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è, –∞—Ä–µ–Ω–¥–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–∏—á–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n"
    "‚Ä¢ üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ‚Äî –º–∞–π—Å—ã, –∏–≤–µ–Ω—Ç—ã, —Ç–∏–º–±–∏–ª–¥–∏–Ω–≥–∏, —Ä–µ—Ç—Ä–∏—Ç—ã.\n"
    "‚Ä¢ üéØ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö ‚Äî –ø–µ–π–Ω—Ç–±–æ–ª, –∫–æ–º–∞–Ω–¥–Ω—ã–µ –∏–≥—Ä—ã (¬´–ö—Ä–æ–∫–æ–¥–∏–ª¬ª, ¬´–ë–∏—Ç–≤–∞ –ì–µ—Ä–æ–µ–≤¬ª).\n"
    "‚Ä¢ üç∑ –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã ‚Äî –¥–µ–≥—É—Å—Ç–∞—Ü–∏–∏ –≤–∏–Ω –∏ –¥—Ä—É–≥–∏—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤, —Å–æ–º–µ–ª—å–µ —Å–µ—Å—Å–∏–∏.\n"
    "‚Ä¢ üé® –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã ‚Äî –ª–µ–ø–∫–∞, –∫–µ—Ä–∞–º–∏–∫–∞, —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∏–≥—Ä—É—à–µ–∫ –∏ –∏–∑–¥–µ–ª–∏–π.\n\n"
    "–£ –Ω–∞—Å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –≤—Å—ë –¥–ª—è —è—Ä–∫–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ –∏ —Å–ø–ª–æ—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ‚Äî –æ—Ç –¥—É—à–µ–≤–Ω—ã—Ö —Å–µ–º–µ–π–Ω—ã—Ö —Ç–æ—Ä–∂–µ—Å—Ç–≤ –¥–æ –º–∞—Å—à—Ç–∞–±–Ω—ã—Ö –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
)

ABOUT_PHOTO = "https://raw.githubusercontent.com/EV4557/KOSSE.club---bot/main/logoKosse.png"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup([
    ["–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"],
    ["–ù–µ–º–Ω–æ–≥–æ –æ –Ω–∞—Å", "–î—Ä–µ—Å—Å-–∫–æ–¥ –∏ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è"],
    ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç"]
], resize_keyboard=True)

# –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
EVENTS = {
    "–•–æ—Ä–æ–≤–æ–¥ –°–≤–µ—Ç–∞": {
        "—Å—Å—ã–ª–∫–∞": "https://kaliningrad.qtickets.events/183804-khorovod-sveta",
        "—Ü–µ–Ω–∞": "üéüÔ∏è –î–µ—Ç–∏ —Å 4-12 ‚Äî 700‚ÇΩ\nüíé –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ‚Äî 1000‚ÇΩ\nüé© –í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ ‚Äî 1400‚ÇΩ",
        "–≤—Ä–µ–º—è": "üïñ 13 —Å–µ–Ω—Ç—è–±—Ä—è\n–ù–∞—á–∞–ª–æ –≤ 13:00, –æ–∫–æ–Ω—á–∞–Ω–∏–µ –≤ 22:00",
        "–º–µ—Å—Ç–æ": "üìç –ö–µ–º–ø–∏–Ω–≥ Kosse.club, —É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è, 10, –Ø–Ω—Ç–∞—Ä–Ω—ã–π."
    }
}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
PRICE_KEYWORDS = ["—Ü–µ–Ω–∞", "—Ü–µ–Ω", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç", "–±–∏–ª–µ—Ç", "–ø—Ä–∞–π—Å", "–æ–ø–ª–∞—Ç–∞", "–¥–µ–Ω–µ–≥", "—Ä—É–±", "‚ÇΩ"]
TIME_KEYWORDS = ["–≤—Ä–µ–º—è", "–≤—Ä–µ–º–µ–Ω", "–∫–æ–≥–¥–∞", "–≤–æ —Å–∫–æ–ª—å–∫–æ", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–¥–∞—Ç–∞", "—á–∏—Å–ª–æ", "—Å—Ä–æ–∫–∏", "–¥–µ–Ω—å", "–Ω–∞—á–∞–ª–æ", "–æ–∫–æ–Ω—á–∞–Ω–∏–µ"]
PLACE_KEYWORDS = ["–º–µ—Å—Ç–æ", "–º–µ—Å—Ç", "–≥–¥–µ", "–∞–¥—Ä–µ—Å", "–ª–æ–∫–∞—Ü–∏—è", "—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è", "–ø–ª–æ—â–∞–¥–∫–∞", "–∫–µ–º–ø–∏–Ω–≥", "kosse", "kosse.club", "–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è"]
RETURN_KEYWORDS = ["–≤–æ–∑–≤—Ä–∞—Ç", "–≤–µ—Ä–Ω—É—Ç—å", "–æ–±–º–µ–Ω", "refund", "–æ—Ç–º–µ–Ω–∞", "–æ—Ç–º–µ–Ω–∏—Ç—å", "—Å–¥–∞—Ç—å –±–∏–ª–µ—Ç", "–≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏"]
CONTACT_KEYWORDS = ["–∫–æ–Ω—Ç–∞–∫—Ç", "—Å–≤—è–∑—å", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–ø–æ—á—Ç–∞", "email", "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–∞–¥–º–∏–Ω"]
ABOUT_KEYWORDS = ["–æ –≤–∞—Å", "–æ –∫–ª—É–±–µ", "–æ –Ω–∞—Å", "–∏–Ω—Ñ–æ", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "—á—Ç–æ —Ç–∞–∫–æ–µ kosse", "–Ω–µ–º–Ω–æ–≥–æ –æ –≤–∞—Å", "—á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å"]

# --- Handlers ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Kosse.club üéüÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=main_menu
    )
    return CHOOSE_ACTION

async def handle_faq_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text_clean = update.message.text.strip().lower()

    if text_clean in ["—Ü–µ–Ω–∞", "–≤—Ä–µ–º—è", "–º–µ—Å—Ç–æ"]:
        context.user_data["faq_type"] = text_clean
        keyboard = [[name] for name in EVENTS.keys()] + [["‚¨Ö –ù–∞–∑–∞–¥"]]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –ø—Ä–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return CHOOSE_EVENT_FOR_QUESTION

    elif text_clean == "–≤–æ–∑–≤—Ä–∞—Ç –±–∏–ª–µ—Ç–∞":
        await update.message.reply_text(
            f"üßæ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –±–∏–ª–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ {organizer_contact} –∏ —É–∫–∞–∂–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
            reply_markup=main_menu
        )
        return CHOOSE_ACTION

    elif text_clean == "‚¨Ö –Ω–∞–∑–∞–¥":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
        return CHOOSE_ACTION

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.")
        return ASK_QUESTION

async def handle_faq_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
        return CHOOSE_ACTION

    faq_type = context.user_data.get("faq_type")
    event_info = EVENTS.get(text)

    if not event_info:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return CHOOSE_EVENT_FOR_QUESTION

    if faq_type == "—Ü–µ–Ω–∞":
        msg = f"–¶–µ–Ω–∞ –Ω–∞ {text}:\n{event_info.get('—Ü–µ–Ω–∞', '–¶–µ–Ω—ã —É—Ç–æ—á–Ω—è—é—Ç—Å—è.')}"
    elif faq_type == "–≤—Ä–µ–º—è":
        msg = f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è {text}:\n{event_info.get('–≤—Ä–µ–º—è', '–í—Ä–µ–º—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è.')}"
    elif faq_type == "–º–µ—Å—Ç–æ":
        msg = f"–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è {text}:\n{event_info.get('–º–µ—Å—Ç–æ', '–ú–µ—Å—Ç–æ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è.')}"
    else:
        msg = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

    await update.message.reply_text(msg, reply_markup=main_menu)
    context.user_data.pop("faq_type", None)
    return CHOOSE_ACTION

async def handle_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text_clean = update.message.text.strip().lower()

    if text_clean == "–∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç":
        keyboard = [[event] for event in EVENTS.keys()] + [["‚¨Ö –ù–∞–∑–∞–¥"]]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return BUY_TICKET

    elif any(word in text_clean for word in CONTACT_KEYWORDS):
        await update.message.reply_text(f"üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º:\n{organizer_contact}", reply_markup=main_menu)
        return CHOOSE_ACTION

    elif text_clean == "–±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        for name, info in EVENTS.items():
            message = f"üéâ {name}\n{info.get('–≤—Ä–µ–º—è','')}\n{info.get('–º–µ—Å—Ç–æ','')}"
            keyboard = [[InlineKeyboardButton("–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç", url=info['—Å—Å—ã–ª–∫–∞'])]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(message, reply_markup=reply_markup)
        return CHOOSE_ACTION

    elif text_clean == "–Ω–µ–º–Ω–æ–≥–æ –æ –Ω–∞—Å":
        await update.message.reply_photo(photo=ABOUT_PHOTO, caption="–ü—Ä–æ–µ–∫—Ç Kosse.club üëá", reply_markup=main_menu)
        await update.message.reply_text(ABOUT_TEXT, reply_markup=main_menu)
        return CHOOSE_ACTION

    elif text_clean == "–¥—Ä–µ—Å—Å-–∫–æ–¥ –∏ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è":
        rules = (
            "üéüÔ∏è *–ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è –∏ –¥—Ä–µ—Å—Å-–∫–æ–¥:*\n\n"
            "1Ô∏è‚É£ –í—Ö–æ–¥ —Ç–æ–ª—å–∫–æ —Å –±–∏–ª–µ—Ç–æ–º.\n"
            "2Ô∏è‚É£ –õ–∏—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.\n"
            "3Ô∏è‚É£ –ù–∞—Ä—É—à–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã.\n\n"
            "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!"
        )
        await update.message.reply_text(rules, parse_mode="Markdown", reply_markup=main_menu)
        return CHOOSE_ACTION

    elif text_clean == "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        keyboard = [["–¶–µ–Ω–∞", "–í—Ä–µ–º—è", "–ú–µ—Å—Ç–æ", "–í–æ–∑–≤—Ä–∞—Ç –±–∏–ª–µ—Ç–∞"], ["‚¨Ö –ù–∞–∑–∞–¥"]]
        await update.message.reply_text("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        context.user_data["fail_count"] = 0
        return ASK_QUESTION

    elif any(word in text_clean for word in PRICE_KEYWORDS + TIME_KEYWORDS + PLACE_KEYWORDS + RETURN_KEYWORDS + ABOUT_KEYWORDS):
        return await handle_faq_question(update, context)

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu)
        return CHOOSE_ACTION

async def handle_buy_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
        return CHOOSE_ACTION

    if text in EVENTS:
        await update.message.reply_text(f"üé´ –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞:\n{EVENTS[text]['—Å—Å—ã–ª–∫–∞']}", reply_markup=main_menu)
        return CHOOSE_ACTION
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return BUY_TICKET

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
    return CHOOSE_ACTION

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv("BOT_TOKEN")
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return

    app = Application.builder().token(token).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_action)],
            ASK_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_faq_question)],
            CHOOSE_EVENT_FOR_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_faq_event)],
            BUY_TICKET: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buy_ticket)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()