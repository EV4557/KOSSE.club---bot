from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler
)

CHOOSE_ACTION, CHOOSE_EVENT, ASK_QUESTION, DETAIL_QUESTION = range(4)

event_details = {
    "–ù–ï–ë–û–°–í–û–î": {
        "—Å—Å—ã–ª–∫–∞": "https://qtickets.ru/event/177134",
        "—Ü–µ–Ω–∞": "White DC: 1000‚ÇΩ\nVIP: 1500‚ÇΩ\n–ö–ª–∞—Å—Å–∏–∫–∞ –±–µ–∑ DC: 2000‚ÇΩ",
        "–≤—Ä–µ–º—è": "2 –∞–≤–≥—É—Å—Ç–∞\n–ù–∞—á–∞–ª–æ –≤ 19:00\n–ö–æ–Ω–µ—Ü –≤ 05:00",
        "–º–µ—Å—Ç–æ": "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: –ü—Ä–∞–≤–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è 9, ¬´–ë—Ä–∞–≤–æ –ò—Ç–∞–ª–∏—è¬ª"
    }
}

organizer_contact = "@elenaelectrodvor"

main_menu = ReplyKeyboardMarkup([
    ["–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"],
    ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"],
    ["–î—Ä–µ—Å—Å-–∫–æ–¥ –∏ –ø—Ä–∞–≤–∏–ª–∞", "–ù–µ–º–Ω–æ–≥–æ –æ –Ω–∞—Å"]
], resize_keyboard=True)


# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Electrodvor üéüÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=main_menu
    )
    return CHOOSE_ACTION


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def handle_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç":
        keyboard = [[name] for name in event_details]
        keyboard.append(["‚¨Ö –ù–∞–∑–∞–¥"])
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return CHOOSE_EVENT

    elif text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(
            f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º –∑–¥–µ—Å—å:\n{organizer_contact}",
            reply_markup=main_menu
        )
        return CHOOSE_ACTION

    elif text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        keyboard = [
            ["–¶–µ–Ω–∞", "–í—Ä–µ–º—è", "–ú–µ—Å—Ç–æ", "–û—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –±–∏–ª–µ—Ç–∞"],
            ["‚¨Ö –ù–∞–∑–∞–¥"]
        ]
        await update.message.reply_text(
            "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç–æ–º:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return ASK_QUESTION

    elif text == "–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        msg = ""
        for name, info in event_details.items():
            msg += f"üéâ {name}\nüïí {info['–≤—Ä–µ–º—è']}\nüìç {info['–º–µ—Å—Ç–æ']}\nüí≥ {info['—Ü–µ–Ω–∞']}\nüîó {info['—Å—Å—ã–ª–∫–∞']}\n\n"
        await update.message.reply_text(msg.strip(), reply_markup=main_menu)
        return CHOOSE_ACTION

    elif text == "–î—Ä–µ—Å—Å-–∫–æ–¥ –∏ –ø—Ä–∞–≤–∏–ª–∞":
        rules = (
            "üëó *–î—Ä–µ—Å—Å-–∫–æ–¥:*\n"
            "1. –ë–µ–ª—ã–π total look ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è\n"
            "2. –ë–µ–∑ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –æ–¥–µ–∂–¥—ã\n"
            "3. –£—Ö–æ–∂–µ–Ω–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥\n\n"
            "üìå *–ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è:*\n"
            "1. –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 18+\n"
            "2. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å –≤–æ –≤—Ö–æ–¥–µ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω\n"
            "3. –ë–∏–ª–µ—Ç—ã –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç—É –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 3 –¥–Ω—è –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
        )
        await update.message.reply_text(rules, parse_mode="Markdown", reply_markup=main_menu)
        return CHOOSE_ACTION

    elif text == "–ù–µ–º–Ω–æ–≥–æ –æ –Ω–∞—Å":
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo="https://raw.githubusercontent.com/EV4557/electrodvor-bot/main/logo.PNG",
            caption=(
                "üìñ *–ù–µ–º–Ω–æ–≥–æ –æ –Ω–∞—Å:*\n\n"
                "–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ Electrodvor, —Å–æ–∑–¥–∞—é—â–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ –≤–µ—á–µ—Ä–∏–Ω–∫–∏ —Å —É–∫–ª–æ–Ω–æ–º –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –º—É–∑—ã–∫—É. "
                "–ù–∞—à–∞ –º–∏—Å—Å–∏—è ‚Äî —Å–æ–±–∏—Ä–∞—Ç—å –ª—é–¥–µ–π, –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –ª—é–±–æ–≤—å—é –∫ –∏—Å–∫—É—Å—Å—Ç–≤—É, –º—É–∑—ã–∫–µ –∏ —ç—Å—Ç–µ—Ç–∏–∫–µ. "
                "–ö–∞–∂–¥–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ‚Äî —ç—Ç–æ –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–æ—Å—Ç–æ —Å–æ–±—ã—Ç–∏–µ, —ç—Ç–æ ‚Äî –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Å—Ç–∞—ë—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞–¥–æ–ª–≥–æ."
            ),
            parse_mode="Markdown",
            reply_markup=main_menu
        )
        return CHOOSE_ACTION

    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.",
            reply_markup=main_menu
        )
        return CHOOSE_ACTION


# –í—ã–±–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
async def handle_event_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
        return CHOOSE_ACTION

    if text in event_details:
        link = event_details[text]["—Å—Å—ã–ª–∫–∞"]
        await update.message.reply_text(
            f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞ –Ω–∞ '{text}':\n{link}",
            reply_markup=main_menu
        )
        return CHOOSE_ACTION
    else:
        await update.message.reply_text("–¢–∞–∫–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return CHOOSE_EVENT


# –í–æ–ø—Ä–æ—Å—ã
async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
        return CHOOSE_ACTION

    if text == "–û—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –±–∏–ª–µ—Ç–∞":
        await update.message.reply_text(
            f"üßæ –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –±–∏–ª–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ {organizer_contact} –∏ —É–∫–∞–∂–∏—Ç–µ:\n"
            "1Ô∏è‚É£ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞\n2Ô∏è‚É£ –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n3Ô∏è‚É£ –ë–∏–ª–µ—Ç—ã\n4Ô∏è‚É£ –ü–æ—á—Ç—É\n5Ô∏è‚É£ –°–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã\n6Ô∏è‚É£ –ü—Ä–∏—á–∏–Ω—É\n\n"
            "üìå –£—Å–ª–æ–≤–∏—è:\n‚Äì >10 –¥–Ω–µ–π: 100% –≤–æ–∑–≤—Ä–∞—Ç\n‚Äì 5‚Äì10 –¥–Ω–µ–π: 50%\n‚Äì 3‚Äì5 –¥–Ω–µ–π: 30%\n‚Äì <3 –¥–Ω–µ–π: –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞",
            reply_markup=main_menu
        )
        return CHOOSE_ACTION

    question = text.lower()
    PRICE = ["—Ü–µ–Ω–∞", "—Ü–µ–Ω", "—Å—Ç–æ–∏–º–æ—Å—Ç—å"]
    TIME = ["–≤—Ä–µ–º—è", "–∫–æ–≥–¥–∞", "–≤–æ —Å–∫–æ–ª—å–∫–æ"]
    PLACE = ["–º–µ—Å—Ç–æ", "–≥–¥–µ"]

    if any(w in question for w in PRICE):
        context.user_data["question_type"] = "—Ü–µ–Ω–∞"
    elif any(w in question for w in TIME):
        context.user_data["question_type"] = "–≤—Ä–µ–º—è"
    elif any(w in question for w in PLACE):
        context.user_data["question_type"] = "–º–µ—Å—Ç–æ"
    else:
        context.user_data["fail_count"] = context.user_data.get("fail_count", 0) + 1
        if context.user_data["fail_count"] >= 2:
            await update.message.reply_text(
                f"–ü–æ—Ö–æ–∂–µ, —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å üòî\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º: {organizer_contact}",
                reply_markup=main_menu
            )
            return CHOOSE_ACTION
        else:
            await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∞—á–µ.")
            return ASK_QUESTION

    keyboard = [[name] for name in event_details]
    keyboard.append(["‚¨Ö –ù–∞–∑–∞–¥"])
    await update.message.reply_text(
        "–û –∫–∞–∫–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∏–¥—ë—Ç —Ä–µ—á—å?",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return DETAIL_QUESTION


# –£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
async def handle_detail_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞:", reply_markup=main_menu)
        return ASK_QUESTION

    question_type = context.user_data.get("question_type")
    if text not in event_details or question_type not in event_details[text]:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu)
        return CHOOSE_ACTION

    await update.message.reply_text(event_details[text][question_type], reply_markup=main_menu)
    return CHOOSE_ACTION


# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
    return CHOOSE_ACTION


# –ó–∞–ø—É—Å–∫
def main():
    import os
    app = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_action)],
            CHOOSE_EVENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_event_choice)],
            ASK_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
            DETAIL_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_detail_question)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    app.run_polling()


if __name__ == "__main__":
    main()