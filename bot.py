from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler

CHOOSE_ACTION, CHOOSE_EVENT, ASK_QUESTION, DETAIL_QUESTION = range(4)

event_details = {
    "–ö–æ–Ω—Ü–µ—Ä—Ç –≤ –ü–∞—Ä–∫–µ": {
        "—Å—Å—ã–ª–∫–∞": "https://example.com/tickets/concert",
        "—Ü–µ–Ω–∞": "–¶–µ–Ω–∞ –Ω–∞ '–ö–æ–Ω—Ü–µ—Ä—Ç –≤ –ü–∞—Ä–∫–µ': 1200‚ÇΩ",
        "–≤—Ä–µ–º—è": "–ù–∞—á–∞–ª–æ –≤ 19:00",
        "–º–µ—Å—Ç–æ": "–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ, —Å—Ü–µ–Ω–∞ —É —Ñ–æ–Ω—Ç–∞–Ω–∞"
    },
    "–§–µ—Å—Ç–∏–≤–∞–ª—å –°–≤–µ—Ç–∞": {
        "—Å—Å—ã–ª–∫–∞": "https://example.com/tickets/festival",
        "—Ü–µ–Ω–∞": "–¶–µ–Ω–∞ –Ω–∞ '–§–µ—Å—Ç–∏–≤–∞–ª—å –°–≤–µ—Ç–∞': 2500‚ÇΩ",
        "–≤—Ä–µ–º—è": "–ù–∞—á–∞–ª–æ –≤ 20:30",
        "–º–µ—Å—Ç–æ": "–í–î–ù–•, –ø–∞–≤–∏–ª—å–æ–Ω ‚Ññ1"
    }
}

organizer_contact = "https://t.me/your_telegram_username"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é —Å—Å—ã–ª–∫—É

main_menu = ReplyKeyboardMarkup([
    ["–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"],
    ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]
], resize_keyboard=True)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Electrodvor üéüÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=main_menu
    )
    return CHOOSE_ACTION

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def handle_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç":
        keyboard = [[name] for name in event_details]
        keyboard.append(["‚¨Ö –ù–∞–∑–∞–¥"])
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return CHOOSE_EVENT

    elif text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º –∑–¥–µ—Å—å:\n{organizer_contact}", reply_markup=main_menu)
        return CHOOSE_ACTION

    elif text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        keyboard = [["–¶–µ–Ω–∞", "–í—Ä–µ–º—è", "–ú–µ—Å—Ç–æ"], ["‚¨Ö –ù–∞–∑–∞–¥"]]
        await update.message.reply_text(
            "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç–æ–º:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return ASK_QUESTION

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu)
        return CHOOSE_ACTION

# –í—ã–±–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
async def handle_event_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
        return CHOOSE_ACTION

    if text in event_details:
        link = event_details[text]["—Å—Å—ã–ª–∫–∞"]
        await update.message.reply_text(f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞ –Ω–∞ '{text}':\n{link}", reply_markup=main_menu)
        return CHOOSE_ACTION
    else:
        await update.message.reply_text("–¢–∞–∫–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return CHOOSE_EVENT

# –í–æ–ø—Ä–æ—Å
async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
        return CHOOSE_ACTION

    question = text.lower()
    PRICE_KEYWORDS = ["—Ü–µ–Ω–∞", "—Ü–µ–Ω"]
    TIME_KEYWORDS = ["–≤—Ä–µ–º—è", "–≤—Ä–µ–º–µ–Ω", "–∫–æ–≥–¥–∞"]
    PLACE_KEYWORDS = ["–º–µ—Å—Ç–æ", "–º–µ—Å—Ç", "–≥–¥–µ"]

    if any(word in question for word in PRICE_KEYWORDS):
        context.user_data["question_type"] = "—Ü–µ–Ω–∞"
    elif any(word in question for word in TIME_KEYWORDS):
        context.user_data["question_type"] = "–≤—Ä–µ–º—è"
    elif any(word in question for word in PLACE_KEYWORDS):
        context.user_data["question_type"] = "–º–µ—Å—Ç–æ"
    else:
        context.user_data["fail_count"] = context.user_data.get("fail_count", 0) + 1
        if context.user_data["fail_count"] >= 2:
            await update.message.reply_text(
                f"–ü–æ—Ö–æ–∂–µ, —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å üòî\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º: {organizer_contact}",
                reply_markup=main_menu
            )
            return CHOOSE_ACTION
        else:
            await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")
            return ASK_QUESTION

    keyboard = [[name] for name in event_details]
    keyboard.append(["‚¨Ö –ù–∞–∑–∞–¥"])
    await update.message.reply_text("–û –∫–∞–∫–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∏–¥–µ—Ç —Ä–µ—á—å?", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return DETAIL_QUESTION

# –£—Ç–æ—á–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
async def handle_detail_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        keyboard = [["–¶–µ–Ω–∞", "–í—Ä–µ–º—è", "–ú–µ—Å—Ç–æ"], ["‚¨Ö –ù–∞–∑–∞–¥"]]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return ASK_QUESTION

    question_type = context.user_data.get("question_type")

    if text not in event_details or question_type not in event_details[text]:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu)
        return CHOOSE_ACTION

    answer = event_details[text][question_type]
    await update.message.reply_text(answer, reply_markup=main_menu)
    return CHOOSE_ACTION

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
    return CHOOSE_ACTION

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    import os
    app = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_action)],
            CHOOSE_EVENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_event_choice)],
            ASK_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
            DETAIL_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_detail_question)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()