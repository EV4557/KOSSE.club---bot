from telegram import Update, ReplyKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler
)

CHOOSE_ACTION, CHOOSE_EVENT, ASK_QUESTION, DETAIL_QUESTION = range(4)

event_details = {
    "–ù–ï–ë–û–°–í–û–î": {
        "—Å—Å—ã–ª–∫–∞": "https://qtickets.ru/event/177134",
        "—Ü–µ–Ω–∞": "White DC: 1000‚ÇΩ\nVIP: 1500‚ÇΩ\n–ö–ª–∞—Å—Å–∏–∫–∞ –±–µ–∑ DC: 2000‚ÇΩ",
        "–≤—Ä–µ–º—è": "2 –∞–≤–≥—É—Å—Ç–∞\n–ù–∞—á–∞–ª–æ –≤ 19:00\n–ö–æ–Ω–µ—Ü –≤ 05:00",
        "–º–µ—Å—Ç–æ": "–ü—Ä–∞–≤–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è 9, ¬´–ë—Ä–∞–≤–æ –ò—Ç–∞–ª–∏—è¬ª"
    }
}

organizer_contact = "@elenaelectrodvor"

main_menu = ReplyKeyboardMarkup([
    ["–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"],
    ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"],
    ["–î—Ä–µ—Å—Å-–∫–æ–¥ –∏ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è", "–ù–µ–º–Ω–æ–≥–æ –æ –Ω–∞—Å"]
], resize_keyboard=True)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Electrodvor üéüÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=main_menu
    )
    return CHOOSE_ACTION

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def handle_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç":
        keyboard = [[name] for name in event_details]
        keyboard.append(["‚¨Ö –ù–∞–∑–∞–¥"])
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return CHOOSE_EVENT

    elif text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(
            f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º –∑–¥–µ—Å—å:\n{organizer_contact}",
            reply_markup=main_menu
        )
        return CHOOSE_ACTION

    elif text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        keyboard = [
            ["–¶–µ–Ω–∞", "–í—Ä–µ–º—è", "–ú–µ—Å—Ç–æ", "–û—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –±–∏–ª–µ—Ç–∞"],
            ["‚¨Ö –ù–∞–∑–∞–¥"]
        ]
        await update.message.reply_text(
            "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç–æ–º:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return ASK_QUESTION

    elif text == "–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        result = []
        for name, info in event_details.items():
            result.append(f"üéâ {name}\nüìç {info['–º–µ—Å—Ç–æ']}\nüïñ {info['–≤—Ä–µ–º—è']}\nüí≥ {info['—Ü–µ–Ω–∞']}")
        await update.message.reply_text("\n\n".join(result), reply_markup=main_menu)
        return CHOOSE_ACTION

    elif text == "–î—Ä–µ—Å—Å-–∫–æ–¥ –∏ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è":
        await update.message.reply_text(
            "üëó *–î—Ä–µ—Å—Å-–∫–æ–¥ –∏ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è:*\n\n"
            "1Ô∏è‚É£ –ë–µ–ª—ã–π –¥—Ä–µ—Å—Å-–∫–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è (White DC)\n"
            "2Ô∏è‚É£ –£–ª—ã–±–∫–∞ –∏ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã\n"
            "3Ô∏è‚É£ –£–≤–∞–∂–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º –≥–æ—Å—Ç—è–º\n"
            "4Ô∏è‚É£ –ù–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–æ–Ω–æ—Å –∞–ª–∫–æ–≥–æ–ª—è –∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤\n"
            "5Ô∏è‚É£ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –æ—Å—Ç–∞–≤–ª—è—é—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å –≤–æ –≤—Ö–æ–¥–µ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω",
            reply_markup=main_menu,
            parse_mode="Markdown"
        )
        return CHOOSE_ACTION

    elif text == "–ù–µ–º–Ω–æ–≥–æ –æ –Ω–∞—Å":
        await update.message.reply_photo(
            photo="URL_–¢–í–û–ï–ì–û_–õ–û–ì–û–¢–ò–ü–ê",
            caption=(
                "üé∂ *–ò—Å—Ç–æ—Ä–∏—è Electrodvor*\n\n"
                "–ú—ã –Ω–∞—á–∞–ª–∏ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –¥–ª—è –¥—Ä—É–∑–µ–π, –∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ–±–∏—Ä–∞–µ–º —Å–æ—Ç–Ω–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –æ—Å–æ–±–µ–Ω–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π, –º—É–∑—ã–∫–æ–π –∏ –∑–∞–±–æ—Ç–æ–π –æ –∫–∞–∂–¥–æ–º –≥–æ—Å—Ç–µ. "
                "Electrodvor ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤–µ—á–µ—Ä–∏–Ω–∫–∏, —ç—Ç–æ —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏, –µ–¥–∏–Ω—Å—Ç–≤–æ –∏ —ç—Å—Ç–µ—Ç–∏–∫–∞.\n\n"
                "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É –¥–≤–∏–∂–µ–Ω–∏—é ‚ù§Ô∏è"
            ),
            parse_mode="Markdown",
            reply_markup=main_menu
        )
        return CHOOSE_ACTION

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu)
        return CHOOSE_ACTION

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Ç—ã –º–æ–∂–µ—à—å –≤—Å—Ç–∞–≤–∏—Ç—å –∏—Ö –∏–∑ —Å–≤–æ–µ–≥–æ –∫–æ–¥–∞):
# handle_event_choice, handle_question, handle_detail_question, cancel

# –ó–∞–ø—É—Å–∫
def main():
    import os
    app = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_action)],
            CHOOSE_EVENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_event_choice)],
            ASK_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
            DETAIL_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_detail_question)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()