import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler
)

CHOOSE_ACTION, CHOOSE_EVENT, ASK_QUESTION, DETAIL_QUESTION = range(4)

event_details = {
    "–ù–ï–ë–û–°–í–û–î": {
        "—Å—Å—ã–ª–∫–∞": "https://qtickets.ru/event/177134",
        "—Ü–µ–Ω–∞": "üéüÔ∏è White DC ‚Äî 1000‚ÇΩ\nüíé VIP ‚Äî 1500‚ÇΩ\nüé© –ö–ª–∞—Å—Å–∏–∫–∞ –±–µ–∑ DC ‚Äî 2000‚ÇΩ",
        "–≤—Ä–µ–º—è": "üïñ 2 –∞–≤–≥—É—Å—Ç–∞\n–ù–∞—á–∞–ª–æ –≤ 19:00, –æ–∫–æ–Ω—á–∞–Ω–∏–µ –≤ 05:00",
        "–º–µ—Å—Ç–æ": "üìç –ü—Ä–∞–≤–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è, 9, ¬´–ë—Ä–∞–≤–æ –ò—Ç–∞–ª–∏—è¬ª"
    },
    "AYAWASKA PARTY": {
        "—Å—Å—ã–ª–∫–∞": "https://qtickets.ru/event/179188",
        "—Ü–µ–Ω–∞": "üéüÔ∏è –õ–µ—Ç–Ω–∏–π —Å—Ç–∏–ª—å, —è—Ä–∫–∏–π –ª—É–∫, –∫—É–ø–∞–ª—å–Ω–∏–∫–∏ ‚Äî 1000‚ÇΩ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ\nüé© –ö–ª–∞—Å—Å–∏–∫–∞ ‚Äî 1500‚ÇΩ",
        "–≤—Ä–µ–º—è": "üïñ 16 –∞–≤–≥—É—Å—Ç–∞\n–ù–∞—á–∞–ª–æ –≤ 19:00, –æ–∫–æ–Ω—á–∞–Ω–∏–µ –≤ 05:00",
        "–º–µ—Å—Ç–æ": "üìç –ö–ª—É–± ‚ÄúW DoubleU‚Äù, –ø—Ä–æ—Å–ø–µ–∫—Ç –ú–∏—Ä–∞ 31"
    }
}

organizer_contact = "@elenaelectrodvor"

main_menu = ReplyKeyboardMarkup([
    ["–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"],
    ["–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "–ù–µ–º–Ω–æ–≥–æ –æ –Ω–∞—Å"],
    ["–î—Ä–µ—Å—Å-–∫–æ–¥ –∏ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è", "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]
], resize_keyboard=True)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Electrodvor üéüÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=main_menu
    )
    return CHOOSE_ACTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±–∏–ª–µ—Ç–∞
async def handle_event_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
        return CHOOSE_ACTION
    if text in event_details:
        link = event_details[text]["—Å—Å—ã–ª–∫–∞"]
        await update.message.reply_text(
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –±–∏–ª–µ—Ç–∞ –¥–ª—è {text}:\n{link}",
            reply_markup=main_menu
        )
        return CHOOSE_ACTION
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.",
            reply_markup=ReplyKeyboardMarkup([[name] for name in event_details] + [["‚¨Ö –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        )
        return CHOOSE_EVENT

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
        return CHOOSE_ACTION

    if "–≤–æ–∑–≤—Ä–∞—Ç" in text.lower():
        await update.message.reply_text(
            f"üßæ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –±–∏–ª–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ {organizer_contact} –∏ —É–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n"
            "1Ô∏è‚É£ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞\n"
            "2Ô∏è‚É£ –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
            "3Ô∏è‚É£ –ö–∞–∫–∏–µ –±–∏–ª–µ—Ç—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å\n"
            "4Ô∏è‚É£ –ü–æ—á—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—ã–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω –∑–∞–∫–∞–∑\n"
            "5Ô∏è‚É£ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã\n"
            "6Ô∏è‚É£ –ü—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞\n\n"
            "üìå –£—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞:\n"
            "‚Ä¢ –ë–æ–ª–µ–µ 10 –¥–Ω–µ–π ‚Äî —É–¥–µ—Ä–∂–∞–Ω–∏–µ 0%\n"
            "‚Ä¢ –û—Ç 5 –¥–æ 10 –¥–Ω–µ–π ‚Äî —É–¥–µ—Ä–∂–∞–Ω–∏–µ 50%\n"
            "‚Ä¢ –û—Ç 3 –¥–æ 5 –¥–Ω–µ–π ‚Äî —É–¥–µ—Ä–∂–∞–Ω–∏–µ 70%\n"
            "‚Ä¢ –ú–µ–Ω–µ–µ 3 –¥–Ω–µ–π ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω",
            reply_markup=main_menu
        )
        return CHOOSE_ACTION

    question = text.lower()
    PRICE_KEYWORDS = ["—Ü–µ–Ω–∞", "—Ü–µ–Ω", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç"]
    TIME_KEYWORDS = ["–≤—Ä–µ–º—è", "–≤—Ä–µ–º–µ–Ω", "–∫–æ–≥–¥–∞", "–≤–æ —Å–∫–æ–ª—å–∫–æ"]
    PLACE_KEYWORDS = ["–º–µ—Å—Ç–æ", "–º–µ—Å—Ç", "–≥–¥–µ"]

    if any(word in question for word in PRICE_KEYWORDS):
        context.user_data["question_type"] = "—Ü–µ–Ω–∞"
    elif any(word in question for word in TIME_KEYWORDS):
        context.user_data["question_type"] = "–≤—Ä–µ–º—è"
    elif any(word in question for word in PLACE_KEYWORDS):
        context.user_data["question_type"] = "–º–µ—Å—Ç–æ"
    else:
        context.user_data["fail_count"] = context.user_data.get("fail_count", 0) + 1
        if context.user_data["fail_count"] >= 2:
            await update.message.reply_text(
                f"–ü–æ—Ö–æ–∂–µ, —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å üòî\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º: {organizer_contact}",
                reply_markup=main_menu
            )
            return CHOOSE_ACTION
        else:
            await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")
            return ASK_QUESTION

    keyboard = [[name] for name in event_details]
    keyboard.append(["‚¨Ö –ù–∞–∑–∞–¥"])
    await update.message.reply_text(
        "–û –∫–∞–∫–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∏–¥—ë—Ç —Ä–µ—á—å?",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return DETAIL_QUESTION

# –£—Ç–æ—á–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
async def handle_detail_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        keyboard = [
            ["–¶–µ–Ω–∞", "–í—Ä–µ–º—è", "–ú–µ—Å—Ç–æ", "–û—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –±–∏–ª–µ—Ç–∞"],
            ["‚¨Ö –ù–∞–∑–∞–¥"]
        ]
        await update.message.reply_text(
            "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
            "‚Ä¢ –¶–µ–Ω–∞ ‚Äî —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–æ–≤\n"
            "‚Ä¢ –í—Ä–µ–º—è ‚Äî –∫–æ–≥–¥–∞ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü\n"
            "‚Ä¢ –ú–µ—Å—Ç–æ ‚Äî –≥–¥–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n"
            "‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –±–∏–ª–µ—Ç–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return ASK_QUESTION

    question_type = context.user_data.get("question_type")

    if text not in event_details or not question_type or question_type not in event_details[text]:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu)
        return CHOOSE_ACTION

    answer = event_details[text][question_type]
    await update.message.reply_text(answer, reply_markup=main_menu)
    return CHOOSE_ACTION

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def handle_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç":
        keyboard = [[name] for name in event_details]
        keyboard.append(["‚¨Ö –ù–∞–∑–∞–¥"])
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return CHOOSE_EVENT

    elif text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(f"üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º:\n{organizer_contact}", reply_markup=main_menu)
        return CHOOSE_ACTION

    elif text == "–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        info = "\n".join(
            f"üéâ {name}\n{event_details[name]['–≤—Ä–µ–º—è']}\n{event_details[name]['–º–µ—Å—Ç–æ']}\n"
            f"–ë–∏–ª–µ—Ç—ã: {event_details[name]['—Å—Å—ã–ª–∫–∞']}\n"
            for name in event_details
        )
        await update.message.reply_text(f"üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n{info}", reply_markup=main_menu)
        return CHOOSE_ACTION

    elif text == "–ù–µ–º–Ω–æ–≥–æ –æ –Ω–∞—Å":
        photo_url = "https://raw.githubusercontent.com/EV4557/electrodvor-bot/main/logo.PNG"
        short_caption = "–ü—Ä–æ–µ–∫—Ç ELECTRODVOR üëá"
        description = (
            "ELECTRODVOR ‚Äî –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ –≤–µ—è–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –≥–æ—Ä–æ–¥–∞. "
            "–ê–±—Å–æ–ª—é—Ç–Ω–æ –Ω–æ–≤—ã–π –∞—Ä—Ç-–ø—Ä–æ–µ–∫—Ç, —Å–æ–∑–¥–∞—é—â–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–≤–µ–Ω—Ç—ã –≤ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–µ.\n\n"
            "... (–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ —É –≤–∞—Å –±—ã–ª–æ) ..."
        )
        await update.message.reply_photo(photo=photo_url, caption=short_caption, reply_markup=main_menu)
        await update.message.reply_text(description, reply_markup=main_menu)
        return CHOOSE_ACTION

    elif text == "–î—Ä–µ—Å—Å-–∫–æ–¥ –∏ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è":
        rules = (
            "üéüÔ∏è *–î—Ä–µ—Å—Å-–∫–æ–¥ –∏ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è:*\n\n"
            "1Ô∏è‚É£ –í—Ö–æ–¥ —Å—Ç—Ä–æ–≥–æ –ø–æ –±–∏–ª–µ—Ç–∞–º.\n"
            "2Ô∏è‚É£ –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ –æ–±—è–∑–∞–Ω—ã –∏–º–µ—Ç—å –ø—Ä–∏ —Å–µ–±–µ –¥–æ–∫—É–º–µ–Ω—Ç, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π –ª–∏—á–Ω–æ—Å—Ç—å.\n"
            "3Ô∏è‚É£ –ú—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –ø–æ—Å–µ—â–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –∏ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∏–ª–µ—Ç–∞.\n"
            "4Ô∏è‚É£ –ù–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è –ª–∏—Ü–∞ –≤ –≥—Ä—è–∑–Ω–æ–π, –Ω–µ–æ–ø—Ä—è—Ç–Ω–æ–π, —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –∏–ª–∏ –Ω–µ–ø–æ–¥–æ–±–∞—é—â–µ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–¥–µ–∂–¥–µ.\n"
            "5Ô∏è‚É£ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –Ω–µ –Ω–µ—Å—É—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Ç–µ—Ä—é –ª–∏—á–Ω—ã—Ö –≤–µ—â–µ–π.\n"
            "6Ô∏è‚É£ –ó–∞–ø—Ä–µ—â–µ–Ω—ã: –∞–≥—Ä–µ—Å—Å–∏—è, –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏, –æ—Ä—É–∂–∏–µ.\n"
            "7Ô∏è‚É£ –ù–∞—Ä—É—à–∏—Ç–µ–ª–∏ –ø–æ—Ä—è–¥–∫–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –±–µ–∑ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.\n\n"
            "üôè –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!"
        )
        await update.message.reply_text(rules, parse_mode="Markdown", reply_markup=main_menu)
        return CHOOSE_ACTION

    elif text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        keyboard = [
            ["–¶–µ–Ω–∞", "–í—Ä–µ–º—è", "–ú–µ—Å—Ç–æ", "–û—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –±–∏–ª–µ—Ç–∞"],
            ["‚¨Ö –ù–∞–∑–∞–¥"]
        ]
        await update.message.reply_text(
            "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
            "‚Ä¢ –¶–µ–Ω–∞ ‚Äî —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–æ–≤\n"
            "‚Ä¢ –í—Ä–µ–º—è ‚Äî –∫–æ–≥–¥–∞ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü\n"
            "‚Ä¢ –ú–µ—Å—Ç–æ ‚Äî –≥–¥–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n"
            "‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –±–∏–ª–µ—Ç–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        context.user_data["fail_count"] = 0
        return ASK_QUESTION

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu)
        return CHOOSE_ACTION

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
    return CHOOSE_ACTION

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_action)],
            CHOOSE_EVENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_event_choice)],
            ASK_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
            DETAIL_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_detail_question)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()